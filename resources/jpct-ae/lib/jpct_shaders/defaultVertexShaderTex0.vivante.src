uniform mat4 modelViewMatrix;
uniform mat4 modelViewProjectionMatrix;
uniform mat4 textureMatrix;

uniform vec4 additionalColor;
uniform vec4 ambientColor;

uniform float alpha;
uniform float shininess;
uniform bool useColors;

uniform int lightCount;

uniform vec3 lightPositions[8];
uniform vec3 diffuseColors[8];
uniform vec3 specularColors[8];
uniform float attenuation[8];

attribute vec4 position;
attribute vec3 normal;
attribute vec4 color;
attribute vec2 texture0;

varying vec2 texCoord;
varying vec4 vertexColor;

const vec4 WHITE = vec4(1,1,1,1);

void addColor(int index, float dt, float angle, vec4 vertexPos){
	if (angle > 0.0) {
		vertexColor += vec4((diffuseColors[index] * angle + specularColors[index] * pow(max(0.0, dt), shininess))*(1.0/(1.0+length(lightPositions[index] - vertexPos.xyz)*attenuation[index])), 1);
	}
}

void main() {

	texCoord = (textureMatrix * vec4(texture0, 0, 1)).xy;	

	vertexColor = ambientColor + additionalColor;

	if (lightCount>0) {
	
		vec4 vertexPos = modelViewMatrix * position;
	
		// This is correct only if the modelview matrix is orthogonal. In jPCT-AE, it always is...unless you fiddle around with it.
		vec3 normalEye   = normalize(modelViewMatrix * vec4(normal, 0.0)).xyz;		
		vec3 surface2Light=normalize(lightPositions[0]  - vertexPos.xyz);
		addColor(0, dot(normalize(-vertexPos.xyz), reflect(-surface2Light, normalEye)), dot(normalEye, surface2Light), vertexPos);

		if (lightCount>1) {
			surface2Light=normalize(lightPositions[1]  - vertexPos.xyz);
			addColor(1, dot(normalize(-vertexPos.xyz), reflect(-surface2Light, normalEye)), dot(normalEye, surface2Light), vertexPos);

			if (lightCount>2) {
				surface2Light=normalize(lightPositions[2]  - vertexPos.xyz);
				addColor(2, dot(normalize(-vertexPos.xyz), reflect(-surface2Light, normalEye)), dot(normalEye, surface2Light), vertexPos);

				if (lightCount>3) {
					surface2Light=normalize(lightPositions[3]  - vertexPos.xyz);
					addColor(3, dot(normalize(-vertexPos.xyz), reflect(-surface2Light, normalEye)), dot(normalEye, surface2Light), vertexPos);

					if (lightCount>4) {
						surface2Light=normalize(lightPositions[4]  - vertexPos.xyz);
						addColor(4, dot(normalize(-vertexPos.xyz), reflect(-surface2Light, normalEye)), dot(normalEye, surface2Light), vertexPos);

						if (lightCount>5) {
							surface2Light=normalize(lightPositions[5]  - vertexPos.xyz);
							addColor(5, dot(normalize(-vertexPos.xyz), reflect(-surface2Light, normalEye)), dot(normalEye, surface2Light), vertexPos);

							if (lightCount>6) {
								surface2Light=normalize(lightPositions[6]  - vertexPos.xyz);
								addColor(6, dot(normalize(-vertexPos.xyz), reflect(-surface2Light, normalEye)), dot(normalEye, surface2Light), vertexPos);
								if (lightCount>7) {
									surface2Light=normalize(lightPositions[7]  - vertexPos.xyz);
									addColor(7, dot(normalize(-vertexPos.xyz), reflect(-surface2Light, normalEye)), dot(normalEye, surface2Light), vertexPos);
								}
							}
						}
					}
				}
			}
		}
	} 
	
	vertexColor=vec4(min(WHITE, vertexColor).xyz, alpha);
	
	if (useColors) {
		vertexColor *= color;
	}
	
	gl_Position = modelViewProjectionMatrix * position;
}